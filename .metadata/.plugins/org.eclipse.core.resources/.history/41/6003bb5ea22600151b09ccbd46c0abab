package org.isbar_software.benchmarks.dynamodb;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.Properties;

import org.neo4j.graphdb.Node;
import org.neo4j.graphdb.Transaction;

import com.amazonaws.auth.AWSCredentials;
import com.amazonaws.auth.BasicAWSCredentials;
import com.amazonaws.services.dynamodbv2.AmazonDynamoDBClient;
import com.amazonaws.services.dynamodbv2.document.BatchWriteItemOutcome;
import com.amazonaws.services.dynamodbv2.document.DynamoDB;
import com.amazonaws.services.dynamodbv2.document.Item;
import com.amazonaws.services.dynamodbv2.document.Table;
import com.amazonaws.services.dynamodbv2.document.TableWriteItems;
import com.amazonaws.services.dynamodbv2.model.WriteRequest;
import com.amazonaws.services.s3.AmazonS3;
import com.amazonaws.util.StringUtils;

public class Benchmark {
	private static final String TABLE1_NAME = "Test1";
	private static final String TABLE2_NAME = "Test2";
	private static final int BATCH_ITEMS = 25;

	private final int count;
	private final String accessKey;
	private final String secretKey;
	
	public Benchmark(Properties properties) {
		count = Integer.parseInt(properties.getProperty("count"));
		accessKey = properties.getProperty("aws.access.key");
        secretKey = properties.getProperty("aws.secret.key"); 
        
        if (StringUtils.isNullOrEmpty(accessKey) || StringUtils.isNullOrEmpty(secretKey))
        	throw new IllegalArgumentException("S3 access key and secret key can not be empty");
	}
	
	public void process() {
		AWSCredentials awsCredentials = new BasicAWSCredentials(accessKey, secretKey);
		DynamoDB dynamoDB = new DynamoDB(new AmazonDynamoDBClient(awsCredentials));
		Table table = dynamoDB.getTable(TABLE1_NAME);

		System.out.println("Testing items write");
   	    long beginTime = System.currentTimeMillis();
   	    for (int i = 0; i < count; ++i) {
   	    	table.putItem(new Item().withPrimaryKey("id", i));	
   	    }
			
		long endTime = System.currentTimeMillis();
	    System.out.println(String.format("Done. Imported %d nodes over %d ms. Average %f ms per node", 
	    		count, endTime - beginTime, (float)(endTime - beginTime) / (float)count));
		
	    System.out.println("Testing batch items write");
   	    beginTime = System.currentTimeMillis();
   	    List<Item> items = new ArrayList<Item>();
   	    int id = 0;
   	    long batchCounter = 0;
   	    do {
   	    	while (id < count && items.size() < BATCH_ITEMS) {
   	    		items.add(
   	    				new Item().withPrimaryKey("id", id));
   	    	}
   	    	
   	    	BatchWriteItemOutcome outcome = dynamoDB.batchWriteItem(
   	    			new TableWriteItems(TABLE2_NAME).withItemsToPut(items));
   	    	do {
   	    		Map<String, List<WriteRequest>> unprocessedItems = outcome.getUnprocessedItems();

   	    		if (outcome.getUnprocessedItems().size() == 0) {
   	    			System.out.println("No unprocessed items found");
   	    		} else {
   	    			System.out.println("Retrieving the unprocessed items");
   	    			outcome = dynamoDB.batchWriteItemUnprocessed(unprocessedItems);
   	    		}

   	    	} while (outcome.getUnprocessedItems().size() > 0);   	    	
   	    }
			
		endTime = System.currentTimeMillis();
	    System.out.println(String.format("Done. Imported %d nodes over %d ms. Average %f ms per node", 
	    		count, endTime - beginTime, (float)(endTime - beginTime) / (float)count));
				
	}
}
